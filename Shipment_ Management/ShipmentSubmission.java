/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package UI;

import java.awt.HeadlessException;
import javax.swing.JOptionPane;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import javax.swing.table.DefaultTableModel;
import java.util.HashSet;
import java.util.Set;

/**
 *  
 * @author kujo7
 */
public class ShipmentSubmission extends javax.swing.JFrame {
    private String username;

 
  public ShipmentSubmission(String username) {
        initComponents();
        this.username = username;
        txtUser.setText(username);
        txtUser.setEditable(false);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenu1 = new javax.swing.JMenu();
        jCheckBoxMenuItem1 = new javax.swing.JCheckBoxMenuItem();
        jPanel1 = new javax.swing.JPanel();
        btnCancel = new javax.swing.JButton();
        btnViewSched = new javax.swing.JButton();
        jPanel2 = new javax.swing.JPanel();
        comboBoxFrom = new javax.swing.JComboBox<>();
        txtPhone = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        comboBoxTo = new javax.swing.JComboBox<>();
        comboBoxType = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtUser = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        btnSubmit = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();

        jMenu1.setText("jMenu1");

        jCheckBoxMenuItem1.setSelected(true);
        jCheckBoxMenuItem1.setText("jCheckBoxMenuItem1");

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jPanel1.setBackground(new java.awt.Color(102, 102, 102));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        btnCancel.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnCancel.setIcon(new javax.swing.ImageIcon(getClass().getResource("/img/Cafe Image & Icon/images/close.png"))); // NOI18N
        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });
        jPanel1.add(btnCancel, new org.netbeans.lib.awtextra.AbsoluteConstraints(490, 400, -1, -1));

        btnViewSched.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnViewSched.setText("View Schedule");
        btnViewSched.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnViewSchedActionPerformed(evt);
            }
        });
        jPanel1.add(btnViewSched, new org.netbeans.lib.awtextra.AbsoluteConstraints(470, 20, -1, -1));

        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        comboBoxFrom.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Batangas", "Calapan", "Bulalacao", "Caticlan", "Dumangas", "Banago", "Dumaguete", "Dapitan", "San Carlos", "Toledo", "Cebu", "Tubigon", "Matnog", "Dapdap", "Liloan", "Surigao" }));
        comboBoxFrom.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxFromActionPerformed(evt);
            }
        });
        jPanel2.add(comboBoxFrom, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 104, 102, -1));

        txtPhone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPhoneActionPerformed(evt);
            }
        });
        jPanel2.add(txtPhone, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 44, 102, -1));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel3.setText("Phone Number :");
        jPanel2.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(171, 18, -1, -1));

        comboBoxTo.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Batangas", "Calapan", "Bulalacao", "Caticlan", "Dumangas", "Banago", "Dumaguete", "Dapitan", "San Carlos", "Toledo", "Cebu", "Tubigon", "Matnog", "Dapdap", "Liloan", "Surigao" }));
        jPanel2.add(comboBoxTo, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 148, 102, -1));

        comboBoxType.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Car", "Van", "Truck", "Motorcycle" }));
        comboBoxType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                comboBoxTypeActionPerformed(evt);
            }
        });
        jPanel2.add(comboBoxType, new org.netbeans.lib.awtextra.AbsoluteConstraints(177, 216, 102, -1));

        jLabel6.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel6.setText("Type Of Vehicle :");
        jPanel2.add(jLabel6, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 216, -1, -1));

        jLabel5.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel5.setText("Shipment To :");
        jPanel2.add(jLabel5, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 148, -1, -1));

        jLabel4.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel4.setText("Shipment From :");
        jPanel2.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 106, -1, 16));

        txtUser.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtUserActionPerformed(evt);
            }
        });
        jPanel2.add(txtUser, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 44, 71, -1));

        jLabel2.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel2.setText("User :");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(23, 18, -1, -1));

        btnSubmit.setBackground(new java.awt.Color(255, 255, 204));
        btnSubmit.setFont(new java.awt.Font("Segoe UI", 1, 12)); // NOI18N
        btnSubmit.setText("Submit");
        btnSubmit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSubmitActionPerformed(evt);
            }
        });
        jPanel2.add(btnSubmit, new org.netbeans.lib.awtextra.AbsoluteConstraints(207, 256, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(50, 56, 300, 300));

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 0, 590, 440));

        jLabel1.setFont(new java.awt.Font("Viner Hand ITC", 3, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 102));
        jLabel1.setText("Shipment ");
        getContentPane().add(jLabel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 50, 220, 100));

        jLabel7.setFont(new java.awt.Font("Viner Hand ITC", 3, 24)); // NOI18N
        jLabel7.setText("Form");
        getContentPane().add(jLabel7, new org.netbeans.lib.awtextra.AbsoluteConstraints(130, 160, -1, -1));

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnSubmitActionPerformed(java.awt.event.ActionEvent evt) {
        Connection conn = null;
        PreparedStatement pstmt = null;
        ResultSet rs = null;
        try {
            // Basic validation
            String userName = txtUser.getText().trim();
            String phoneNumber = txtPhone.getText().trim();
            String shipmentFrom = comboBoxFrom.getSelectedItem().toString();
            String shipmentTo = comboBoxTo.getSelectedItem().toString();
            
            // Check shipment count and update status if necessary
            String countQuery = "SELECT COUNT(*) AS shipment_count FROM ShipmentSubmission WHERE shipment_from = ?";
            try (Connection checkConn = MyConnection.getConnection();
                 PreparedStatement checkStmt = checkConn.prepareStatement(countQuery)) {
                
                // Check shipment count for 'From' location
                checkStmt.setString(1, shipmentFrom);
                ResultSet checkRs = checkStmt.executeQuery();
                if (checkRs.next() && checkRs.getInt("shipment_count") >= 3) {
                    updateLocationStatus(shipmentFrom, "Not Available");
                }
                
                // Check shipment count for 'To' location
                checkStmt.setString(1, shipmentTo);
                checkRs = checkStmt.executeQuery();
                if (checkRs.next() && checkRs.getInt("shipment_count") >= 3) {
                    updateLocationStatus(shipmentTo, "Not Available");
                }
            }

            // Continue with existing validation
            if (userName.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a user name.");
                return;
            }
            if (phoneNumber.isEmpty()) {
                JOptionPane.showMessageDialog(this, "Please enter a phone number.");
                return;
            }
            
            // Phone number validation
            if (!phoneNumber.matches("\\d+")) {
                JOptionPane.showMessageDialog(this, "Phone number should contain only digits.");
                return;
            }
            
            // Validate selections
            if (comboBoxFrom.getSelectedIndex() == comboBoxTo.getSelectedIndex()) {
                JOptionPane.showMessageDialog(this, "Shipment from and to locations cannot be the same.");
                return;
            }
            
            // Get database connection
            conn = MyConnection.getConnection();
            if (conn == null) {
                JOptionPane.showMessageDialog(this, "Unable to connect to database. Please check your connection.");
                return;
            }
            
            // First verify if the username exists in login table
            String checkUser = "SELECT username FROM login WHERE username = ?";
            pstmt = conn.prepareStatement(checkUser);
            pstmt.setString(1, userName);
            if (!pstmt.executeQuery().next()) {
                JOptionPane.showMessageDialog(this, "User not found. Please use a valid username.");
                return;
            }
            
            String countQuery1 = "SELECT COUNT(*) AS shipment_count FROM ShipmentSubmission WHERE shipment_from = ? AND shipment_to = ?";
            pstmt = conn.prepareStatement(countQuery1);
            pstmt.setString(1, shipmentFrom);
            pstmt.setString(2, shipmentTo);
            rs =  pstmt.executeQuery();
            
            int shipmentCount = 0;
            if (rs.next()){
                shipmentCount = rs.getInt("shipment_count");
            }
            
            int shipmentLimit = 3; // Example limit
            if (shipmentCount >= shipmentLimit){
                JOptionPane.showMessageDialog(this, "Shipment limit for " + shipmentFrom + " to "+ shipmentTo + " has been reached. Please choose another route.");
                return; // Prevent further execution
            }
            
            // If shipment limit not reached, proceed with shipment submission
            String sql = "INSERT INTO ShipmentSubmission (user_name, phone_number, shipment_from, shipment_to, vehicle_type) " +
                        "VALUES (?, ?, ?, ?, ?)";
            
            // Close previous PreparedStatement before creating a new one
            if (pstmt != null) pstmt.close();
            
            pstmt = conn.prepareStatement(sql);
            
            // Set values for the prepared statement
            pstmt.setString(1, userName);
            pstmt.setString(2, phoneNumber);
            pstmt.setString(3, shipmentFrom);
            pstmt.setString(4, shipmentTo);
            pstmt.setString(5, comboBoxType.getSelectedItem().toString());
            
            int result = pstmt.executeUpdate();
            
            if (result > 0) {
                // Create a formatted receipt message
                String receiptMessage = String.format(
                    "Shipment Confirmation Receipt\n" +
                    "-------------------------\n" +
                    "Username: %s\n" +
                    "Phone Number: %s\n" +
                    "From: %s\n" +
                    "To: %s\n" +
                    "Vehicle Type: %s\n" +
                    "-------------------------\n" +
                    "Shipment submitted successfully!",
                    userName,
                    phoneNumber,
                    shipmentFrom,
                    shipmentTo,
                    comboBoxType.getSelectedItem().toString()
                );
                
                JOptionPane.showMessageDialog(this, receiptMessage, "Shipment Confirmation", JOptionPane.INFORMATION_MESSAGE);
                
                // Clear form and return to dashboard
                clearForm();
                ClientDashboard dashboard = new ClientDashboard(userName);
                dashboard.setVisible(true);
                this.dispose();
            } else {
                JOptionPane.showMessageDialog(this, "Failed to submit shipment. Please try again.");
            }
            
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, 
                "Database Error: " + e.getMessage() + "\nSQL State: " + e.getSQLState() + "\nError Code: " + e.getErrorCode());
        } catch (Exception e) {
            JOptionPane.showMessageDialog(this, "Unexpected error: " + e.getMessage());
            e.printStackTrace();
        } finally {
            try {
                if (rs != null) rs.close();
                if (pstmt != null) pstmt.close();
                if (conn != null) conn.close();
            } catch (SQLException e) {
                JOptionPane.showMessageDialog(this, "Error closing database connection: " + e.getMessage());
            }
        }
    }

    // Helper method to clear form
    private void clearForm() {
        txtUser.setText("");
        txtPhone.setText("");
        comboBoxFrom.setSelectedIndex(0);
        comboBoxTo.setSelectedIndex(0);
        comboBoxType.setSelectedIndex(0);
    }

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {
        ClientDashboard dashboard = new ClientDashboard(txtUser.getText().trim());
        dashboard.setVisible(true);
        this.dispose();
    }

    private void comboBoxFromActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxFromActionPerformed
        // TODO add your handling code here:   
    }//GEN-LAST:event_comboBoxFromActionPerformed

    private void comboBoxTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_comboBoxTypeActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_comboBoxTypeActionPerformed

    private void txtPhoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPhoneActionPerformed
        // TODO add your handling code here:
        
    }//GEN-LAST:event_txtPhoneActionPerformed

    private void txtUserActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtUserActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtUserActionPerformed

    private void btnViewSchedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnViewSchedActionPerformed
        // TODO add your handling code here:
        new ViewSched().setVisible(true);
    }//GEN-LAST:event_btnViewSchedActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        // No need to remove items, just keep the locations and show warnings when selected
    }//GEN-LAST:event_formComponentShown

    private void checkLocationAvailability(javax.swing.JComboBox<String> comboBox) {
        String selectedLocation = comboBox.getSelectedItem().toString();
        try (Connection con = MyConnection.getConnection();
             PreparedStatement stmt = con.prepareStatement("SELECT Status_ship FROM schedules WHERE Location_from = ?")) {
            stmt.setString(1, selectedLocation);
            ResultSet rs = stmt.executeQuery();
            if (rs.next() && "Not Available".equals(rs.getString("Status_ship"))) {
                JOptionPane.showMessageDialog(this, selectedLocation + " is currently not available for shipment.", 
                                              "Location Not Available", JOptionPane.WARNING_MESSAGE);
            }
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error checking location availability: " + e.getMessage(), 
                                          "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    private void updateLocationStatus(String location, String status) {
        try (Connection con = MyConnection.getConnection();
             PreparedStatement stmt = con.prepareStatement(
                 "UPDATE schedules SET Status_ship = ? WHERE Location_from = ?")) {
            stmt.setString(1, status);
            stmt.setString(2, location);
            stmt.executeUpdate();
        } catch (SQLException e) {
            JOptionPane.showMessageDialog(this, "Error updating location status: " + e.getMessage(), 
                                          "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        
        try { 
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ShipmentSubmission.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            new ShipmentSubmission("").setVisible(true);
        });
    }
    
        
        
      
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnSubmit;
    private javax.swing.JButton btnViewSched;
    private javax.swing.JComboBox<String> comboBoxFrom;
    private javax.swing.JComboBox<String> comboBoxTo;
    private javax.swing.JComboBox<String> comboBoxType;
    private javax.swing.JCheckBoxMenuItem jCheckBoxMenuItem1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JMenu jMenu1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JTextField txtPhone;
    private javax.swing.JTextField txtUser;
    // End of variables declaration//GEN-END:variables

    private void username(String userId) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}
